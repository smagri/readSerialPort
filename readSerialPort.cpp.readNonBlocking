#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
 


int main(int argc, char** argv){

  struct termios tio;
  struct termios stdio;
  struct termios old_stdio;
  int tty_fd;
 
  unsigned char charRead = 'D';
  tcgetattr(STDOUT_FILENO, &old_stdio);
 
  // Input serial port to communicate with as command line argument
  printf("Please start with %s /dev/ttyS1 (for example)\n", argv[0]);

  // Configure stdin and stout, as part make them non-blocking streams.
  memset(&stdio ,0, sizeof(stdio));
  stdio.c_iflag=0;
  stdio.c_oflag=0;
  stdio.c_cflag=0;
  stdio.c_lflag=0;
  stdio.c_cc[VMIN]=1;
  stdio.c_cc[VTIME]=0;
  tcsetattr(STDOUT_FILENO, TCSANOW, &stdio);
  tcsetattr(STDOUT_FILENO, TCSAFLUSH, &stdio);
  fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK); // make the reads non-blocking
 
  // Configure the terminal/serial port.
  memset(&tio, 0, sizeof(tio));
  tio.c_iflag=0;
  tio.c_oflag=0;
  tio.c_cflag=CS8|CREAD|CLOCAL; // 8n1, see termios.h for more information
  tio.c_lflag=0;
  tio.c_cc[VMIN]=1;
  tio.c_cc[VTIME]=5;

  // system calls ie open/read/write() need error handling

  // Open the terminal/serial port stream: as read, write and non-blocking.
  tty_fd = open(argv[1], O_RDWR | O_NONBLOCK);      
  cfsetospeed(&tio, B9600); // as per arduino sketch
  cfsetispeed(&tio, B9600); // as per arduino sketch
  tcsetattr(tty_fd, TCSANOW, &tio);

  // Loop till stdin/console input is character 'q'.
  while (charRead != 'q'){

    // if new data is available on the serial port, print it out to stdout.
    if (read(tty_fd, &charRead, 1) > 0){
        write(STDOUT_FILENO, &charRead, 1);
    }

    // if new data is available on the console/stdin, store input into charRead.
    if (read(STDIN_FILENO, &charRead, 1) > 0){
      //write(tty_fd , &charRead, 1);
    }

  }
 
  close(tty_fd);
  tcsetattr(STDOUT_FILENO, TCSANOW, &old_stdio);
 
  return EXIT_SUCCESS;
}
